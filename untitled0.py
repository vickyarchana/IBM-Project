# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1htvGUGay_9_PPSC_Jt-y8uyoOYG_gxV5
"""

!pip install transformers torch gradio -q

# Install dependencies
!pip install -q transformers torch gradio accelerate

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# -------------------------
# Load model & tokenizer
# -------------------------
model_name = "ibm-granite/granite-3.2-2b-instruct"

tokenizer = AutoTokenizer.from_pretrained(model_name)

model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

# Ensure pad_token exists
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token


# -------------------------
# Response generation
# -------------------------
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    # Remove the original prompt from the output
    response = response.replace(prompt, "").strip()
    return response


# -------------------------
# City Analysis Function
# -------------------------
def city_analysis(city_name):
    prompt = f"""
Provide a detailed analysis of {city_name} including:
1. Crime Index and safety statistics
2. Accident rates and traffic safety information
3. Overall safety assessment

City: {city_name}
Analysis:
"""
    return generate_response(prompt, max_length=1000)


# -------------------------
# Citizen Interaction Function
# -------------------------
def citizen_interaction(query):
    prompt = f"""
As a government assistant, provide accurate and helpful information about the following citizen query related to public services, government policies, or civic issues:

Query: {query}
Response:
"""
    return generate_response(prompt, max_length=1000)


# -------------------------
# Gradio App
# -------------------------
with gr.Blocks() as app:
    gr.Markdown("# ðŸŒ† City Analysis & Citizen Services AI")

    with gr.Tabs():
        with gr.TabItem("City Analysis"):
            with gr.Row():
                with gr.Column():
                    city_input = gr.Textbox(
                        label="Enter City Name",
                        placeholder="e.g., New York, London, Mumbai...",
                        lines=1
                    )
                    analyze_btn = gr.Button("Analyze City")

                with gr.Column():
                    city_output = gr.Textbox(
                        label="City Analysis (Crime Index & Accidents)",
                        lines=15
                    )

            analyze_btn.click(city_analysis, inputs=city_input, outputs=city_output)

        with gr.TabItem("Citizen Services"):
            with gr.Row():
                with gr.Column():
                    citizen_query = gr.Textbox(
                        label="Your Query",
                        placeholder="Ask about public services, government policies, civic issues...",
                        lines=4
                    )
                    query_btn = gr.Button("Get Information")

                with gr.Column():
                    citizen_output = gr.Textbox(
                        label="Government Response",
                        lines=15
                    )

            query_btn.click(citizen_interaction, inputs=citizen_query, outputs=citizen_output)

# âœ… Make sure this line has NO indentation
app.launch(share=True)